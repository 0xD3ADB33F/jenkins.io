/*
 * This build.gradle file is to be used for generating the prototype
 * jenkins.io, via static generation
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:1.2.0"
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:[1.1.4,2.0)"
    }
}
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'com.github.jruby-gradle.base'

description = 'Build for generating jenkins.io'
defaultTasks 'assemble'

configurations {
    asciidoctor
    jekyllImport
}

jruby {
    defaultVersion jrubyVersion
    execVersion jrubyVersion
}

dependencies {
    /* used for primary site generation */
    //asciidoctor 'rubygems:awestruct:0.5.5'
    //asciidoctor('rubygems:rest-client:1.6.7') { force = true }
    asciidoctor('rubygems:awestruct:[0.5.6,0.6)')
    /* used for legacy markdown template processing via tilt */
    asciidoctor 'rubygems:kramdown:[1.9.0,2.0)'

    /* used for processing haml templates (haml.info) */
    asciidoctor 'rubygems:haml:[4.0.7,5.0)'
    /* used for processing inline liquid templating */
    asciidoctor 'rubygems:liquid:[3.0.6,4.0)'

    jekyllImport 'rubygems:sequel:[4.27.0,5.0)'
    jekyllImport 'org.postgresql:postgresql:9.3-1104-jdbc41'
}

import com.github.jrubygradle.JRubyExec

task compileContent(type: JRubyExec) {
    group 'Site'
    description 'Compile the site using the awestruct CLI'
    script 'awestruct'
    scriptArgs '--generate', '--verbose',
                '--source-dir', "${projectDir}/${contentDir}",
                '--output-dir', "${buildDir}/_site"
    /* without the --force option, awestruct is not smart enough to regenerate
     * files based on includes */
    configuration 'asciidoctor'
    /* <https://github.com/awestruct/awestruct/issues/497> */
    workingDir contentDir
    inputs.source fileTree(projectDir)
                    .include("${contentDir}/**/*.adoc")
                    .include("${contentDir}/**/*.haml")
                    .include("${contentDir}/**/*.md")
}

task copyLegacyAssets(type: Copy) {
    group 'Site'
    description 'Copy legacy Drupal assets to preserve legacy content rendering'
    File targetDir = file("${buildDir}/_site/sites/default/files")
    targetDir.mkdirs()

    destinationDir = targetDir
    from "${projectDir}/legacy/files"
}

task assemble {
    group 'Site'
    description 'Assemble the full site'
    dependsOn compileContent, copyLegacyAssets
}


task run(type: JRubyExec) {
    group 'Site'
    description 'Compile and run the site with live-reloading enabled'
    script 'awestruct'
    scriptArgs '--generate', '--verbose',
                '--source-dir', "${projectDir}/${contentDir}",
                '--output-dir', "${buildDir}/_site",
                '--force', '--server'
    /* without the --force option, awestruct is not smart enough to regenerate
     * files based on includes */
    configuration 'asciidoctor'
    inputs.source fileTree(projectDir).include("${contentDir}/**")
}


task importFromDrupal(type: JRubyExec) {
    group 'Other'
    description 'Import the legacy Drupal site directly from a DB'
    script "${projectDir}/scripts/drupal-import"
    scriptArgs drupalDatabase, drupalUsername, drupalPassword
    configuration 'jekyllImport'
    workingDir "${projectDir}/${contentDir}"
    inputs.source file("${projectDir}/scripts/drupal-import")
}
